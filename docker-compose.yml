version: "3"

networks:
#   monitor-net:
#     driver: bridge
  mongo-compose-network:
      driver: bridge

volumes:
    prometheus_data: {}
    grafana_data: {}

services:
  # grafana:
  #   #build
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning:/etc/grafana/provisioning
  #   environment: 
  #     - GF_SERVER_ROOT_URL=http://localhost
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   expose:
  #     - 3000
  #   # ports:
  #   #   - 3000:3000
  #   networks:
  #     - monitor-net
  #   labels:
  #     org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:6.5.1
    container_name: monitoring_grafana
    restart: unless-stopped
    links:
      - prometheus:prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SERVER_ROOT_URL=http://localhost
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      # - GF_SERVER_DOMAIN=myrul.com
      # - GF_SMTP_ENABLED=true
      # - GF_SMTP_HOST=smtp.gmail.com:587
      # - GF_SMTP_USER=myadrress@gmail.com
      # - GF_SMTP_PASSWORD=mypassword
      # - GF_SMTP_FROM_ADDRESS=myaddress@gmail.com
    expose:
      - 3000
    ports:
      - 3000:3000

  prometheus:
    image: prom/prometheus:latest
    container_name: monitoring_prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      # - '--alertmanager.url=http://alertmanager:9093'
    expose:
      - 9090
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter
  
  node-exporter:
    image: prom/node-exporter:latest
    container_name: monitoring_node_exporter
    restart: unless-stopped
    expose:
      - 9100

  cadvisor:
    image: google/cadvisor:latest
    container_name: monitoring_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
    links:
      - mongo
    networks:
      - mongo-compose-network

  mongo:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    ports:
      - "27017:27017"
    volumes:
      - ./MongoDB:/data/db
    networks:
      - mongo-compose-network

  mongodb-exporter:
    image: xendera/mongodb-exporter
    container_name: mongodb-exporter
    hostname: mongodb-exporter
    ports:
      - 9216:9216
    # You can provide custom params to the exporter, according to your mongodb config, like SSL support, ...
    command: -mongodb.tls -mongodb.tls-ca /etc/certs/mycert.crt -mongodb.tls-private-key /etc/certs/mycert.pem
    # volumes:
      # - /etc/certs:/etc/certs
    environment:
      - MONGODB_URL=mongodb://mongo
      # You can provide HTTP Auth, according to your mongodb config
      - HTTP_AUTH=admin:admin

  # postgres:
#   Use the Docker Image postgres. This will pull the newest release.
    # image: "postgres"
    # container_name: postgres
#   Give the container the name my_postgres. You can changes to something else.
    # container_name: "postgres"
#   Setup the username, password, and database name. You can changes these values.
    # environment:
    #   - POSTGRES_USER=admin
    #   - POSTGRES_PASSWORD=123456
    #   - POSTGRES_DB=postgreedb
    #   - TZ=GMT
#   Maps port 54320 (localhost) to port 5432 on the container. You can change the ports to fix your needs.
    # ports:
    #   - 5432:5432
#   Set a volume some that database is not lost after shutting down the container.
#   I used the name postgres-data but you can changed it to something else.

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   restart: always
  #   build:
  #       context: .
  #       dockerfile: Dockerfile
  #   volumes:
  #       - ./htdocs/var/www/html
  #       - ./nginx/logs/var/log/nginx
  #       - ./nginx/sites/etc/nginx/conf.d
  #   ports:
  #       - "80:80"
  #       - "443:443"

  # mysql:
  #   image: mysql:5.7
  #   ports:
  #     - 3306:3306
  #   environment:
  #     MYSQL_ROOT_PASSWORD: 123456
  #     MYSQL_DATABASE: fiapdb
  #     MYSQL_USER: fiap
  #     MYSQL_PASSAWORD: 123456